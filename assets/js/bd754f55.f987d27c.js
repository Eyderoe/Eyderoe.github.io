"use strict";(self.webpackChunkeyderoe_blog=self.webpackChunkeyderoe_blog||[]).push([[6833],{6227:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"STM32/ETL\u5e93","title":"ETL (\u5d4c\u5165\u5f0f\u6a21\u677f\u5e93)","description":"Embedded Template Library\uff0cSTL \u5e93\u5728\u5d4c\u5165\u5f0f\u9886\u57df\u7684\u4e00\u4e2a\u8865\u5145\uff0c\u7eaf\u5934\u6587\u4ef6\u5e93\uff0c\u5e76\u4e14\u5c3d\u91cf\u907f\u514d\u4e86\u7ee7\u627f\u6765\u51cf\u5c11\u865a\u51fd\u6570\u5f00\u9500\uff0c\u5b98\u7f51","source":"@site/docs/STM32/ETL\u5e93.mdx","sourceDirName":"STM32","slug":"/STM32/ETL\u5e93","permalink":"/docs/STM32/ETL\u5e93","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"STM32 \xd7 CLion \u65b0\u5efa\u9879\u76ee","permalink":"/docs/STM32/\u65b0\u5efa\u9879\u76ee"},"next":{"title":"\u529f\u80fd","permalink":"/docs/category/\u529f\u80fd"}}');var s=r(4848),l=r(8453);const i={sidebar_position:3},o="ETL (\u5d4c\u5165\u5f0f\u6a21\u677f\u5e93)",a={},c=[{value:"\u5bb9\u5668",id:"\u5bb9\u5668",level:2},{value:"vector \u52a8\u6001\u6570\u7ec4",id:"vector-\u52a8\u6001\u6570\u7ec4",level:3},{value:"pool \u5bf9\u8c61\u6c60",id:"pool-\u5bf9\u8c61\u6c60",level:3},{value:"bitset \u6bd4\u7279\u6570\u7ec4",id:"bitset-\u6bd4\u7279\u6570\u7ec4",level:3},{value:"optional \u53ef\u9009\u503c",id:"optional-\u53ef\u9009\u503c",level:3},{value:"string \u5b57\u7b26\u4e32",id:"string-\u5b57\u7b26\u4e32",level:3},{value:"\u8bbe\u8ba1\u6a21\u5f0f",id:"\u8bbe\u8ba1\u6a21\u5f0f",level:2},{value:"Observer \u89c2\u5bdf\u8005\u6a21\u5f0f",id:"observer-\u89c2\u5bdf\u8005\u6a21\u5f0f",level:3},{value:"Overload \u91cd\u8f7d",id:"overload-\u91cd\u8f7d",level:3},{value:"\u6570\u5b66",id:"\u6570\u5b66",level:2},{value:"Pseudo Moving Average \u4f2a\u79fb\u52a8\u5e73\u5747",id:"pseudo-moving-average-\u4f2a\u79fb\u52a8\u5e73\u5747",level:3},{value:"Hash &amp; CRC \u54c8\u5e0c\u53ca\u5faa\u73af\u5197\u4f59\u6821\u9a8c",id:"hash--crc-\u54c8\u5e0c\u53ca\u5faa\u73af\u5197\u4f59\u6821\u9a8c",level:3},{value:"\u6846\u67b6",id:"\u6846\u67b6",level:2},{value:"Finite State Machine \u6709\u9650\u72b6\u6001\u673a",id:"finite-state-machine-\u6709\u9650\u72b6\u6001\u673a",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"etl-\u5d4c\u5165\u5f0f\u6a21\u677f\u5e93",children:"ETL (\u5d4c\u5165\u5f0f\u6a21\u677f\u5e93)"})}),"\n",(0,s.jsxs)(n.p,{children:["Embedded Template Library\uff0cSTL \u5e93\u5728\u5d4c\u5165\u5f0f\u9886\u57df\u7684\u4e00\u4e2a\u8865\u5145\uff0c\u7eaf\u5934\u6587\u4ef6\u5e93\uff0c\u5e76\u4e14\u5c3d\u91cf\u907f\u514d\u4e86\u7ee7\u627f\u6765\u51cf\u5c11\u865a\u51fd\u6570\u5f00\u9500\uff0c",(0,s.jsx)(n.a,{href:"https://www.etlcpp.com/",children:"\u5b98\u7f51"})]}),"\n",(0,s.jsx)(n.p,{children:"ETL \u5927\u6982\u9700\u8981 20-50KB\uff0cSTM32 \u7a7a\u95f4\u53c2\u8003 (FLASH / RAM):"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"STM32 F103C8: C8 (64K / 20K)"}),"\n",(0,s.jsx)(n.li,{children:"STM32 L4R5: R5 (2M / 640K[192+64+384])"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"\u5efa\u8bae\u6700\u4f4e\u7248\u672c\uff1aC++11"}),"\n",(0,s.jsx)(n.h2,{id:"\u5bb9\u5668",children:"\u5bb9\u5668"}),"\n",(0,s.jsx)(n.p,{children:"\u6309\u89c4\u5219\u5b58\u653e\u5143\u7d20\u7684\u4e1c\u897f\uff0c\u652f\u6301\u5e38\u89c1\u5bb9\u5668\uff0c\u5982: vector, map, bitset, ..."}),"\n",(0,s.jsx)(n.p,{children:"\u867d\u7136\u5f88\u591a\u90fd\u652f\u6301\u52a8\u6001\u5185\u5b58\uff0c\u5982 vector_ext\u3002\u4f46\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528"}),"\n",(0,s.jsx)(n.h3,{id:"vector-\u52a8\u6001\u6570\u7ec4",children:"vector \u52a8\u6001\u6570\u7ec4"}),"\n",(0,s.jsx)(n.p,{children:"\u6700\u5e38\u89c1\u7684\u5bb9\u5668\uff0c\u5927\u5c0f: (SIZE * sizeof(T)) + (2 * sizeof(size_t)) + sizeof(T*)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"#include <etl/vector.h>\r\nvoid vectorTest () {\r\n    etl::vector<int, 10> base; // \u521d\u59cb\u5316\u65f6\u9700\u8981\u58f0\u660e\u5927\u5c0f, \u6240\u4ee5push\u4e0d\u4f1a\u5bfc\u81f4\u8fed\u4ee3\u5668\u5b9e\u73b0\r\n    int *ptr = base.begin(); // \u8fed\u4ee3\u5668\u5c31\u662f\u6307\u9488\r\n    etl::vector<int, 10>::reverse_iterator rPtr = base.rbegin(); // \u53cd\u5411\u8fed\u4ee3\u5668\u662f\u771f\u8fed\u4ee3\u5668\r\n    base.push_back(27); // STL\u65b9\u6cd5\r\n    bool isFull = base.full(); // \u989d\u5916\u65b9\u6cd5\r\n    int *newInt = new int [5]{67, 89, 36};\r\n    memcpy(ptr + 1, newInt, 5 * sizeof(int));\r\n    base.repair(); // \u901a\u8fc7\u5e95\u5c42\u51fd\u6570\u79fb\u52a8\u5143\u7d20\u540e\uff0c\u5fc5\u987b\u4f7f\u7528\u8be5\u65b9\u6cd5\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"pool-\u5bf9\u8c61\u6c60",children:"pool \u5bf9\u8c61\u6c60"}),"\n",(0,s.jsx)(n.p,{children:"\u5bf9\u8c61\u6c60\u53ef\u4ee5\u51cf\u5c11\u4ece\u5934\u521b\u5efa\u6bcf\u4e2a\u5bf9\u8c61\u7684\u6027\u80fd\u5f00\u9500"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#include <etl/pool.h>\r\nvoid poolTest () {\r\n    class Obj {\r\n        public:\r\n            Obj () { std::cout << "Obj ctor" << std::endl; }\r\n            ~Obj () { std::cout << "Obj dtor" << std::endl; }\r\n    };\r\n    etl::pool<Obj, 10> objPool;\r\n    Obj *newObj1 = objPool.create(); // \u5206\u914d\u4e00\u4e2a\u521d\u59cb\u5316\u597d\u7684\u5bf9\u8c61\r\n    Obj *newObj2 = objPool.allocate(); // \u672a\u521d\u59cb\u5316\u7684\u88f8\u6307\u9488\r\n    objPool.destroy(newObj1); // \u6790\u6784\u5bf9\u8c61\u540e\u653e\u56de\u6c60\u5b50\r\n    objPool.release(newObj2); // \u653e\u56de\u6c60\u5b50\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"bitset-\u6bd4\u7279\u6570\u7ec4",children:"bitset \u6bd4\u7279\u6570\u7ec4"}),"\n",(0,s.jsx)(n.p,{children:"\u7528\u4e8e\u7ba1\u7406\u4e00\u7cfb\u5217 bit \u4f4d"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#include <etl/bitset.h>\r\nvoid bitsetTest () {\r\n    // \u5168\u7279\u5316\u6a21\u677f: <8, uint8_t>, <16, uint16_t>, <32, uint32_t>, <8, uint64_t>\r\n    etl::bitset<8, uint8_t> base{"0101"}; // <\u6570\u91cf, \u57fa\u672c\u5b58\u50a8\u5355\u4f4d>\r\n    bool result = base.any(0x3f); // \u63a9\u7801, \u4ec5\u4f7f\u7528\u4f4e\u516d\u4f4d\r\n    auto spanize = base.span(); // \u8fd4\u56despan\u5bf9\u8c61\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"optional-\u53ef\u9009\u503c",children:"optional \u53ef\u9009\u503c"}),"\n",(0,s.jsx)(n.p,{children:"\u8868\u793a\u4e00\u4e2a\u53ef\u80fd\u5b58\u5728\u7684\u503c\uff0c\u6bd4\u4f7f\u7528\u7279\u6b8a\u503c\u66f4\u4e3a\u5b89\u5168"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#include <etl/optional.h>\r\netl::optional<int> optionalTest () {\r\n    etl::optional<int> returnValue{42};\r\n    returnValue = {}; // \u4e0d\u540c\u4e8e stl, \u8fd9\u91cc\u5c06\u8c03\u7528\u9ed8\u8ba4\u6784\u9020\r\n    return returnValue;\r\n}\r\n\r\nauto result = optionalTest();\r\nif (result.has_value())\r\n    std::cout << result.value() << std::endl;\r\nelse\r\n    std::cout << "INOP" << std::endl;\n'})}),"\n",(0,s.jsx)(n.h3,{id:"string-\u5b57\u7b26\u4e32",children:"string \u5b57\u7b26\u4e32"}),"\n",(0,s.jsx)(n.p,{children:"\u65e2\u6709\u57fa\u672c\u7684 string \u7c7b\u578b"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#include <etl/string.h>\r\nvoid stringTest () {\r\n    etl::string<10> str;\r\n    str.repair(); // \u540c vector.repair()\r\n    size_t location = str.find(""); // STL\u65b9\u6cd5\r\n    bool isStart = str.starts_with(""); // \u989d\u5916\u65b9\u6cd5\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"\u4e5f\u6709\u5f88\u597d\u7528\u7684\u5176\u4ed6\u7c7b\u578b\u8f6c string\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528 string_stream"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"#include <etl/format_spec.h>\r\n#include <etl/to_string.h>\r\nvoid toStringTest () {\r\n    etl::format_spec format;\r\n    format.hex().width(8).fill('0'); // \u683c\u5f0f\u8981\u6c42: 16\u8fdb\u5236, \u5bbd\u5ea68, \u5de6\u586b\u51450\r\n    etl::string<10> str;\r\n    etl::to_string(401, str, format);\r\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u6216\u8005 string \u8f6c\u6570\u503c"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#include <etl/to_arithmetic.h>\r\nvoid fromStringTest () {\r\n    char cStr[]{"101"};\r\n    etl::string<10> cppStr{"101"};\r\n    int result = etl::to_arithmetic<int>(cStr, 3, etl::bin); // \u4ee5\u4e8c\u8fdb\u5236\u5f62\u5f0f\u8f6c\u6362\r\n    result = etl::to_arithmetic<int>(cppStr, etl::radix::binary); // \u4ee5\u4e8c\u8fdb\u5236\u5f62\u5f0f\u8f6c\u6362\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"\u8fd8\u6709\u4e00\u4e9b\u597d\u7528\u7684\u5c0f\u529f\u80fd"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void otherStringTest () {\r\n    etl::string<32> str{\"a,b:c\"};\r\n    etl::trim_whitespace_left(str); // \u5220\u9664\u5de6\u4fa7\u7a7a\u767d (' ', '\\t', '\\n', '\\r', '\\f', '\\v')\r\n    etl::reverse(str); // \u7ffb\u8f6c\u5b57\u7b26\u4e32\r\n    etl::vector<etl::string<32>, 10> base;\r\n    etl::optional<etl::string_view> token;\r\n    while ((token = etl::get_token(str, \".,:\", token, true)))\r\n        base.emplace_back(token.value()); // \u5b9e\u73b0\u7c7b\u4f3c python\u7684split()\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"\u8bbe\u8ba1\u6a21\u5f0f",children:"\u8bbe\u8ba1\u6a21\u5f0f"}),"\n",(0,s.jsx)(n.p,{children:"\u806a\u660e\u4eba\u603b\u7ed3\u51fa\u7684\u65b9\u6848"}),"\n",(0,s.jsx)(n.p,{children:"ETL \u5b9e\u73b0\u4e86\u5168\u90e8\u6216\u90e8\u5206\u7ec6\u8282\uff1a\u89c2\u5bdf\u8005\u3001\u8d23\u4efb\u94fe\u3001\u5355\u4f8b\u3001\u8bbf\u95ee\u8005"}),"\n",(0,s.jsx)(n.h3,{id:"observer-\u89c2\u5bdf\u8005\u6a21\u5f0f",children:"Observer \u89c2\u5bdf\u8005\u6a21\u5f0f"}),"\n",(0,s.jsx)(n.p,{children:"\u4e00\u4e2a\u5bf9\u8c61\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u901a\u77e5\u5176\u4ed6\u5bf9\u8c61\u3002\u6ce8\u610f\u865a\u51fd\u6570\u5e26\u6765\u7684\u6027\u80fd\u5f00\u9500"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#include <etl/observer.h>\r\nstruct Position {\r\n    int x, y;\r\n};\r\nstruct Velocity {\r\n    double x;\r\n};\r\ntypedef etl::observer<const Position&, Velocity> Observer; // \u5bf9\u8c61: \u4e24\u4e2a\u7ed3\u6784\u4f53\r\n\r\nclass Handler : public Observer { // \u8ba2\u9605\u6d88\u606f, \u7eaf\u865a\u51fd\u6570, \u9700\u8981\u5b9e\u73b0\u5168\u90e8\u65b9\u6cd5\r\n    public:\r\n        void notification (const Position &pos) override {\r\n            std::cout << pos.x << " " << pos.y << std::endl;\r\n        }\r\n        void notification (const Velocity v) override {\r\n            std::cout << v.x << std::endl;\r\n        }\r\n};\r\n\r\nclass Driver : public etl::observable<Observer, 1> { // \u53d1\u5e03\u6d88\u606f\r\n    public:\r\n        void event () {\r\n            Position pos{1, 2};\r\n            notify_observers(pos);\r\n        }\r\n};\r\n\r\nvoid observeTest () { // \u53d1\u5e03\u6d88\u606f\u540e, \u8ba2\u9605\u8005\u67e5\u6536\r\n    Driver driver;\r\n    Handler handler;\r\n    driver.add_observer(handler);\r\n    driver.event();\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"overload-\u91cd\u8f7d",children:"Overload \u91cd\u8f7d"}),"\n",(0,s.jsx)(n.p,{children:"\u4e0d\u80fd\u7b97\u8bbe\u8ba1\u6a21\u5f0f\u5427\uff0c\u4f46\u8fd9\u91cc\u7684\u91cd\u8f7d\u6bd4\u4e00\u822c\u60c5\u51b5\u8981\u7075\u6d3b\u4e00\u4e9b"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"#include <etl/overload.h>\r\nint result_int;\r\nfloat result_float;\r\nauto overloaded = etl::make_overload([](int i) { result_int = i; },\r\n                                     [](float i) { result_float = i; });\r\ntemplate <typename T, typename TOverload>\r\nvoid Function (T value, TOverload &&ol) {\r\n    ol(value);\r\n}\r\nvoid overloadTest () {\r\n    Function(1, overloaded);\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"\u6570\u5b66",children:"\u6570\u5b66"}),"\n",(0,s.jsx)(n.p,{children:"\u4e00\u7cfb\u5217\u7b97\u6570\u548c\u56fe\u50cf\u5904\u7406\u7b97\u6cd5"}),"\n",(0,s.jsx)(n.h3,{id:"pseudo-moving-average-\u4f2a\u79fb\u52a8\u5e73\u5747",children:"Pseudo Moving Average \u4f2a\u79fb\u52a8\u5e73\u5747"}),"\n",(0,s.jsx)(n.p,{children:"\u4e00\u79cd\u8ba1\u7b97\u79fb\u52a8\u5e73\u5747\u7684\u7b80\u5316\u65b9\u6cd5"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#include "etl/pseudo_moving_average.h"\r\n#include "etl/vector.h"\r\nvoid pmaTest () {\r\n    etl::vector<int, 10> data{1, 2, 3, 5};\r\n    etl::pseudo_moving_average<int, 5, 2> base(0); // \u6837\u672c\u6570, \u7f29\u653e\u56e0\u5b50, (\u521d\u59cb\u503c)\r\n    std::copy(data.begin(), data.end(), base.input()); // \u901a\u8fc7 copy() \u6dfb\u52a0\u4e00\u4e32\r\n    base.add(27); // \u901a\u8fc7 add() \u65b9\u6cd5\u6dfb\u52a0\u4e00\u4e2a\u503c\r\n    std::cout << base.value();\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"hash--crc-\u54c8\u5e0c\u53ca\u5faa\u73af\u5197\u4f59\u6821\u9a8c",children:"Hash & CRC \u54c8\u5e0c\u53ca\u5faa\u73af\u5197\u4f59\u6821\u9a8c"}),"\n",(0,s.jsx)(n.p,{children:"hash \u652f\u6301\u5d4c\u5165\u5f0f\u4e2d\u5e38\u7528\u7b97\u6cd5\uff1afnv\u3001murmur3\u3001jenkins"}),"\n",(0,s.jsx)(n.p,{children:"crc \u652f\u6301\u975e\u5e38\u5168\u9762\uff0c\u5b9e\u73b0\u4e86\u7edd\u5927\u90e8\u5206\u80fd\u60f3\u5230\u7684 crc \u7c7b\u578b"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#include <etl/murmur3.h>\r\nvoid hashTest () {\r\n    etl::murmur3<uint32_t> hasher;\r\n    std::string sentense{"abcdefg"};\r\n    hasher.add(sentense.begin(), sentense.end()); // \u53ea\u652f\u6301 add() \u65b9\u6cd5\r\n    uint32_t result = hasher.value();\r\n}\r\n\r\n#include <etl/crc32_bzip2.h>\r\nvoid crcTest () {\r\n    std::string sentense{"abcdef"};\r\n    etl::crc32_bzip2 crc;\r\n    crc.add(sentense.begin(), sentense.end()); // \u65e2\u53ef\u4ee5\u901a\u8fc7 add() \u65b9\u6cd5\r\n    std::copy(sentense.begin(), sentense.end(), crc.input()); // \u4e5f\u80fd\u901a\u8fc7 copy() \u5b9e\u73b0\r\n    uint32_t result = crc.value();\r\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"\u6846\u67b6",children:"\u6846\u67b6"}),"\n",(0,s.jsx)(n.p,{children:"\u6bd4\u8f83\u5927\u7684\u8bbe\u8ba1\uff0c\u4f8b\u5982\uff1a\u59d4\u6258\u3001\u72b6\u6001\u673a\u3001\u591a\u4efb\u52a1"}),"\n",(0,s.jsx)(n.h3,{id:"finite-state-machine-\u6709\u9650\u72b6\u6001\u673a",children:"Finite State Machine \u6709\u9650\u72b6\u6001\u673a"}),"\n",(0,s.jsx)(n.p,{children:"\u6709\u9650\u4e2a\u72b6\u6001\u95f4\u8f6c\u6362\u3002\u770b\u4e86\u4f1a\u4ee3\u7801\uff0c\u611f\u89c9\u7528\u4e0d\u4e0a\uff0c\u5c31\u8fd9\u6837\u5427"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"#include <etl/fsm.h>\r\n\r\nconst etl::message_router_id_t CONTROL = 0;\r\n\r\n// \u4e8b\u4ef6\r\nstruct EventId {\r\n    enum { START, STOP };\r\n};\r\nclass Start : public etl::message<EventId::START> {};\r\nclass Stop : public etl::message<EventId::STOP> {};\r\n\r\n// \u72b6\u6001\r\nstruct StateId {\r\n    enum { IDLE, RUNNING, NUMBER_OF_STATES };\r\n};\r\nclass Control : public etl::fsm {\r\n    public:\r\n        Control (): fsm(CONTROL) {}\r\n};\r\n\r\n// Idle\u72b6\u6001, \u63a5\u53d7\u542f\u52a8\u4e8b\u4ef6\r\nclass Idle : public etl::fsm_state<Control, Idle, StateId::IDLE, Start> {\r\n    public:\r\n        etl::fsm_state_id_t on_event (const Start &event) {\r\n            return StateId::RUNNING;\r\n        }\r\n        etl::fsm_state_id_t on_event_unknown (const etl::imessage &img) {\r\n            return STATE_ID;\r\n        }\r\n};\r\n// Running\u72b6\u6001, \u63a5\u53d7\u505c\u6b62\u4e8b\u4ef6\r\nclass Running : public etl::fsm_state<Control, Running, StateId::RUNNING, Stop> {\r\n    public:\r\n        etl::fsm_state_id_t on_event (const Stop &event) {\r\n            return StateId::IDLE;\r\n        }\r\n        etl::fsm_state_id_t on_event_unknown (const etl::imessage &img) {\r\n            return STATE_ID;\r\n        }\r\n};\r\n\r\nIdle idle;\r\nRunning running;\r\netl::ifsm_state *stateList[StateId::NUMBER_OF_STATES] = {&idle, &running};\r\n\r\nvoid fsmTest () {\r\n    Control control;\r\n    control.set_states(stateList, etl::size(stateList));\r\n    control.receive(Start()); // \u63a5\u53d7\u4e00\u4e2a\u542f\u52a8\u4e8b\u4ef6, \u8f6c\u6362\u4e3aRunning\u72b6\u6001\r\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var t=r(6540);const s={},l=t.createContext(s);function i(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);